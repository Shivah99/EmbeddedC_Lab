## Zombie Process:

    When a process forks and the child process terminates, the child's internal task structure information is maintained within the kernel.
The parent process should fetch the child's status information by doing a wait() on for the child process. Only then does the kernel release
the child's context information and the child is truly dead.
    
    If, however, the parent process does not bother to wait for it's child then, when the child dies, 
it's task information is still maintained in the kernel. The state of the child process now is neither completely dead nor alive so,
it is called a Zombie. This process is known as Zombie Process.

## Orphan process:

    Unlike, Zombie process when the parent process exits before the child an inconsistency results in the kernel's task structures.
The inconsistency is with regard to the PPID of the child - since the parent has died, the PPID now in the child's PPID to that of
the init process (grandparent/ PID of 1).Since the child lost it's immediate parent, it is termed an orphaned process.